{"version":3,"sources":["components/BackgroundImage.js","api/unsplash.js","components/Weather.js","api/openweather.js","components/Quote.js","api/qod.js","App.js","serviceWorker.js","index.js"],"names":["BackgroundImage","children","useState","url","setUrl","useEffect","axios","then","info","data","urls","full","catch","console","error","className","style","backgroundImage","Weather","weather","setWeather","currTemp","setCurrTemp","main","temp","normWeather","toLowerCase","getIcon","Quote","quote","setQuote","author","setAuthor","res","contents","quotes","App","moment","format","time","hourString","charAt","hour","parseInt","includes","getTimeOfDay","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"wRAqBeA,EAlBS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAClBC,mBAAS,IADS,mBACjCC,EADiC,KAC5BC,EAD4B,KAWxC,OARAC,qBAAU,WCHHC,IAAM,CACXH,IAAK,kGDIFI,MAAK,SAAAC,GACJJ,EAAOI,EAAKC,KAAKC,KAAKC,SAGvBC,MAAMC,QAAQC,SAChB,IAED,yBAAKC,UAAU,MAAMC,MAAO,CAACC,gBAAgB,OAAD,OAASd,EAAT,OAC3CF,IE8BUiB,EA3CC,WAAO,IAAD,EACQhB,mBAAS,IADjB,mBACfiB,EADe,KACNC,EADM,OAEUlB,mBAAS,IAFnB,mBAEfmB,EAFe,KAELC,EAFK,KA+BpB,OARFjB,qBAAW,WCvBFC,IAAM,CACXH,IAAI,gHDwBHI,MAAK,SAAAC,GACJY,EAAWZ,EAAKC,KAAKU,QAAQ,GAAGI,MAChCD,EAAYd,EAAKC,KAAKc,KAAKC,SAE5BZ,MAAMC,QAAQC,SAChB,IAEC,yBAAKC,UAAU,WACf,yBAAKA,UAAU,+BA7BH,SAAAI,GACb,IAAMM,EAAcN,EAAQO,cAC7B,MAAoB,UAAhBD,EACM,SACiB,SAAhBA,EACD,eACiB,UAAhBA,EACD,SACiB,SAAhBA,EACD,eACiB,SAAhBA,EACD,eACiB,WAAhBA,EACD,SAEA,GAeHE,CAAQR,GADb,IACwBE,EADxB,SAGA,yBAAKN,UAAU,+BAAf,YEjBWa,EAnBD,WAAO,IAAD,EACQ1B,mBAAS,IADjB,mBACX2B,EADW,KACJC,EADI,OAES5B,mBAAS,IAFlB,mBAEZ6B,EAFY,KAEJC,EAFI,KAclB,OAVA3B,qBAAU,WCJHC,IAAM,CACXH,IAAK,4BDKFI,MAAK,SAAA0B,GAEJ,OADAH,EAASG,EAAIxB,KAAKyB,SAASC,OAAO,GAAGN,OAC9BI,KAER1B,MAAK,SAAA0B,GAAG,OAAID,EAAUC,EAAIxB,KAAKyB,SAASC,OAAO,GAAGJ,WAClDnB,MAAMC,QAAQC,SAChB,IAGD,yBAAKC,UAAU,SAAf,IAAyBc,EAAzB,OAAoCE,I,sBE2BzBK,MAtCf,WAwBE,OACF,kBAAC,EAAD,KACE,6BACE,kBAAC,EAAD,MACA,yBAAKrB,UAAU,qBACb,uBAAGA,UAAU,QAAQsB,MAASC,OAAO,OADvC,QA1BiB,WACnB,IAAMC,EAAOF,MAASC,OAAO,MACvBE,EAAaD,EAAKE,OAAO,GACzBC,EAAOC,SAASH,GACtB,OAAID,EAAKK,SAAS,MACZF,EAAO,GAAKA,EAAO,GACd,UACY,KAATA,EACH,YAEA,QAGLA,EAAO,EACF,YACEA,GAAQ,GAAKA,EAAO,EACtB,UAEA,QAUDG,GAFR,KAIA,kBAAC,EAAD,SC3BgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdhD,OAAM,SAAAE,GACLD,QAAQC,MAAMA,EAAM+C,c","file":"static/js/main.af955303.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { getRandomBackground } from '../api/unsplash'\r\n\r\nconst BackgroundImage = ({ children }) => {\r\n  const [url, setUrl] = useState('')\r\n\r\n  useEffect(() => {\r\n    getRandomBackground()\r\n      .then(info => {\r\n        setUrl(info.data.urls.full)\r\n        // setUrl(data.urls.full)\r\n      })\r\n      .catch(console.error)\r\n  }, [])\r\n  return (\r\n    <div className='app' style={{backgroundImage: `url(${url})`}}>\r\n    {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BackgroundImage\r\n","import axios from 'axios'\r\n\r\nexport const getRandomBackground = () => {\r\n  return axios({\r\n    url: 'https://api.unsplash.com/photos/random/?client_id=yvDbdmzH9jwPVA3lUMj6GkzZhssWbnnjYUBj0jyWMHc'\r\n  })\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { getWeather } from '../api/openweather'\r\n\r\nconst Weather = () => {\r\nconst [weather, setWeather] = useState('')\r\nconst [currTemp, setCurrTemp] = useState('')\r\n\r\nconst getIcon = weather => {\r\n   const normWeather = weather.toLowerCase()\r\n  if (normWeather === 'clear') {\r\n    return ('☀')\r\n  } else if (normWeather === 'rain') {\r\n    return ('🌧')\r\n  } else if (normWeather === 'storm') {\r\n    return ('⛈')\r\n  } else if (normWeather === 'snow') {\r\n    return ('🌨')\r\n  } else if (normWeather === 'mist') {\r\n    return ('🌫')\r\n  } else if (normWeather === 'clouds') {\r\n    return ('☁')\r\n  } else {\r\n    return ('')\r\n  }\r\n}\r\n\r\nuseEffect (() => {\r\n  getWeather()\r\n    .then(info => {\r\n      setWeather(info.data.weather[0].main)\r\n      setCurrTemp(info.data.main.temp)\r\n    })\r\n    .catch(console.error)\r\n}, [])\r\n  return (\r\n    <div className='weather'>\r\n    <div className='container weather-container'>\r\n        {getIcon(weather)} {currTemp}°C\r\n    </div>\r\n    <div className='container weather-container'>\r\n        Riyadh\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Weather\r\n","import axios from 'axios'\r\n\r\nexport const getWeather = () => {\r\n  return axios({\r\n    url:'http://api.openweathermap.org/data/2.5/weather?q=Riyadh&units=metric&APPID=6e50bcfc9824d701e06f39dfd8668779'\r\n  })\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { getQuote } from '../api/qod'\r\n\r\nconst Quote = () => {\r\n  const [quote, setQuote] = useState('')\r\n  const[author, setAuthor] = useState('')\r\n\r\n  useEffect(() => {\r\n    getQuote()\r\n      .then(res => {\r\n        setQuote(res.data.contents.quotes[0].quote)\r\n        return res\r\n      })\r\n      .then(res => setAuthor(res.data.contents.quotes[0].author))\r\n      .catch(console.error)\r\n  }, [])\r\n\r\n  return (\r\n    <div className='quote'>\"{quote}\" - {author}</div>\r\n  )\r\n}\r\n\r\nexport default Quote\r\n","import axios from 'axios'\r\n\r\nexport const getQuote = () => {\r\n  return axios({\r\n    url: 'https://quotes.rest/qod',\r\n  })\r\n}\r\n","import React from 'react';\nimport BackgroundImage from './components/BackgroundImage'\nimport Weather from './components/Weather'\nimport Quote from './components/Quote'\nimport moment from 'moment'\nimport './App.css';\n\nfunction App() {\n\nconst getTimeOfDay = () => {\n  const time = moment().format('LT')\n  const hourString = time.charAt(0)\n  const hour = parseInt(hourString)\n  if (time.includes('AM')) {\n    if (hour > 2 && hour < 12) {\n      return 'morning'\n    } else if ( hour === 12) {\n      return 'afternoon'\n    } else {\n      return 'night'\n    }\n  } else {\n    if (hour < 5) {\n      return 'afternoon'\n    } else if (hour >= 5 && hour < 9) {\n      return 'evening'\n    } else {\n      return 'night'\n    }\n  }\n}\n  return (\n<BackgroundImage>\n  <div>\n    <Weather />\n    <div className='time-and-greeting'>\n      <p className='time'>{moment().format('LT')}</p>\n      Good {getTimeOfDay()}!\n    </div>\n    <Quote />\n  </div>\n</BackgroundImage>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}